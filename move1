package jp.jaxa.iss.kibo.rpc.defaultapk;

//astrobee
        import jp.jaxa.iss.kibo.rpc.api.KiboRpcService;
        import gov.nasa.arc.astrobee.Result;
        import gov.nasa.arc.astrobee.types.Point;
        import gov.nasa.arc.astrobee.types.Quaternion;

//android
        import android.graphics.Bitmap;
        import android.util.Log;

//zxing
        import com.google.zxing.BinaryBitmap;
        import com.google.zxing.LuminanceSource;
        import com.google.zxing.NotFoundException;
        import com.google.zxing.RGBLuminanceSource;
        import com.google.zxing.Reader;
        import com.google.zxing.common.HybridBinarizer;
        import com.google.zxing.qrcode.QRCodeReader;
        import com.google.zxing.ChecksumException;
        import com.google.zxing.FormatException;

/**
 * Class meant to handle commands from the Ground Data System and execute them in Astrobee
 */

public class YourService extends KiboRpcService {

    public String info = "";
    public int pattern;
    public float posX, posY, posZ;

    @Override
    protected void runPlan1() {
        //simulation scan qrcode
        simscanner();

        // astrobee is undocked and the mission starts by using this command
        api.startMission();
        //example

        // astrobee is undocked and the mission start
        moveToWrapper(11.21, -9.8, 4.79, 0, 0, -0.707, 0.707);

        //scan qrcode
        scanner(api.getBitmapNavCam());

        rescan(info);

        //TODO move to point A '

        String  [] coor = info.split("\"");
        for (int i = 0; i< coor.length; i++){
            if (i==2){
                coor[i] = coor[i].substring(1,2);
                pattern = Integer.parseInt(coor[i]);
            }
            else if (i==4){
                coor[i] = coor[i].substring(1,6);
                posX = Float.parseFloat(coor[i]);
            }
            else if (i==6){
                try{
                    coor[i] = coor[i].substring(1,6);
                    posY = Float.parseFloat(coor[i]);
                }

                catch (Exception e){
                    coor[i] = coor[i].substring(1,5);
                    posY = Float.parseFloat(coor[i]);
                }
            }

            else if (i==8){
                coor[i] = coor[i].substring(1,5);
                posZ = Float.parseFloat(coor[i]);
            }

        }
        Log.d("LOG-DEBUGGER","P : "+pattern+" X : "+posX+ " Y : "+posY+" Z : "+posZ);

        // move to the rear of Bay7
        //astronaut
        moveToWrapper(10.6, -8.0, 4.5, 0, 0, -0.707, 0.707);

        // Send mission completion
        api.reportMissionCompletion();

    }

    public void simscanner(){
        Log.d("LOG-DEBUGGER","START FAKE SCANNER METHOD");
        Bitmap _qrcode = Bitmap.createBitmap(640, 480, Bitmap.Config.ARGB_8888);; //let me edit your code
        int[] _intArray = new int[_qrcode.getHeight() * _qrcode.getWidth()];
        _qrcode.getPixels(_intArray, 0, _qrcode.getWidth(), 0, 0, _qrcode.getWidth(), _qrcode.getHeight());
        String _info = " ";

        LuminanceSource _source = new RGBLuminanceSource(_qrcode.getWidth(), _qrcode.getHeight(), _intArray);
        BinaryBitmap _binaryBitmap = new BinaryBitmap(new HybridBinarizer(_source));

        Reader _reader = new QRCodeReader();
        try {
            Log.d("LOG-DEBUGGER", "DECODE STARTED");
            _info = _reader.decode(_binaryBitmap).getText();
            Log.d("LOG-DEBUGGER", "DECODE FINISHED");
            Log.d("LOG-DEBUGGER", "INFO IS " + _info);
        } catch (NotFoundException e) {
            e.printStackTrace();
        } catch (ChecksumException e) {
            e.printStackTrace();
        } catch (FormatException e) {
            e.printStackTrace();
        }
        Log.d("LOG-DEBUGGER","FINISH FAKE SCANNER METHOD");
    }

    public void scanner(Bitmap qrcode){
        Log.d("LOG-DEBUGGER","START SCANNER METHOD");
        int[] intArray = new int[qrcode.getWidth()*qrcode.getHeight()];
        qrcode.getPixels(intArray, 0, qrcode.getWidth(), 0, 0, qrcode.getWidth(), qrcode.getHeight());

        LuminanceSource source = new RGBLuminanceSource(qrcode.getWidth(), qrcode.getHeight(),intArray);
        BinaryBitmap binaryBitmap = new BinaryBitmap(new HybridBinarizer(source));

        Reader reader = new QRCodeReader();
        try {
            Log.d("LOG-DEBUGGER", "DECODE STARTED");
            info = reader.decode(binaryBitmap).getText();
            Log.d("LOG-DEBUGGER","DECODE FINISHED");
            Log.d("LOG-DEBUGGER","INFO IS "+info);
        }
        catch (NotFoundException e) {
            e.printStackTrace();
            Log.d("LOG-DEBUGGER","NFEerror"+e.toString());
        }
        catch (ChecksumException e) {
            e.printStackTrace();
            Log.d("LOG-DEBUGGER","CEerror"+e.toString());
        }
        catch (FormatException e) {
            e.printStackTrace();
            Log.d("LOG-DEBUGGER","FEerror"+e.toString());
        }
        Log.d("LOG-DEBUGGER","RAW DATA = "+info);
        Log.d("LOG-DEBUGGER","FINISH SCANNER METHOD");
    }

    //re scan
    public void rescan(String info){
        if (info == ""){
            scanner(api.getBitmapNavCam());
            Log.d("LOG-DEBUGGER","FINISH reSCANNER");
            api.sendDiscoveredQR(info);
            moving(pattern);
        }
        else {
            api.sendDiscoveredQR(info);
            moving(pattern);
        }
    }


    public void moving(int pattern){
        if(pattern == 1){
            moveToWrapper(posX,posY,posZ, -0.27987656,0.1,-0.65757689, 0.707);
            api.laserControl(true);
            api.takeSnapshot();
            api.laserControl(false);
            moveToWrapper(posX, -9.6, 4.73, 0, 0, -0.707, 0.707);
            moveToWrapper(10.55,-9.3,4.5,0,0,0.707,-0.707);
            //status : should improve
        }
        else if(pattern == 2){
            moveToWrapper(posX,posY,posZ,0.20,-0.35,-0.707,0.707);
            api.laserControl(true);
            api.takeSnapshot();
            api.laserControl(false);
            moveToWrapper(10.3,-9.8,4.37,0,0,0.707,-0.707);
            //status : PLOY
        }
        else if(pattern == 3){
            moveToWrapper(posX,posY,posZ, 0.4398413, -0.53543,-0.707, 0.707);
            api.laserControl(true);
            api.takeSnapshot();
            api.laserControl(false);
            moveToWrapper(10.57,-9,4.45,0,0,0.707,-0.707);
            //status : should improve and waiting for target
        }
        else if(pattern == 4){
            moveToWrapper(posX,posY,posZ,0.1,-0.3,-0.707,0.707);
            api.laserControl(true);
            api.takeSnapshot();
            api.laserControl(false);
            moveToWrapper(10.3,-9.8,4.37,0,0,0.707,-0.707);
            //status : should improve and PLOY improve to shoot target
        }
        else if(pattern == 5){
            moveToWrapper(10.5,-9.8,4.79,0,0,-0.707,0.707);
            moveToWrapper(10.5,-9.8,posZ,0,0,-0.707,0.707);
            moveToWrapper(posX,posY,posZ,-0.1,0.1,-0.663,0.733);
            api.laserControl(true);
            api.takeSnapshot();
            api.laserControl(false);
            moveToWrapper(10.6,-9.8,posZ,0,0,-0.707,0.707);
            //status : editing
        }
        else if(pattern == 6){
            moveToWrapper(11.21, -9.8, 4.79, -0.27285256777068984,-0.25667406587268515,-0.6753338034101134,0.6352906060543915);
            api.laserControl(true);
            api.takeSnapshot();
            api.laserControl(false);
            moveToWrapper(10.3, -10.2, 4.37, 0,0, -0.707, 0.707);
            moveToWrapper(10.3, -9.8, 4.37, 0,0, -0.707, 0.707);
            //status : PLOY
        }
        else if(pattern == 7){
            moveToWrapper(11.5, -9.8, 4.79, 0, 0, -0.707, 0.707);
            moveToWrapper(11.5,-9.8,5.3,0,0,-0.707,0.707);
            moveToWrapper(posX,posY,posZ,0.620,-0.051,-0.1,-0.759);
            api.laserControl(true);
            api.takeSnapshot();
            api.laserControl(false);
            moveToWrapper(11.5,-9.8,5.3,0,0,-0.707,0.707);
            moveToWrapper(11.5, -9.8, 4.79, 0, 0, -0.707, 0.707);
            moveToWrapper(10.55,-9.0,4.5,0,0,-0.707,0.707);
            //status : editing
        }
        else{
            moveToWrapper(posX,posY,posZ,-0.42576567876567,0.2009231234,-0.787,0.627);
            api.laserControl(true);
            api.takeSnapshot();
            api.laserControl(false);
            moveToWrapper(11.21,-9.8,4.79,0,0,-0.707,0.707);
            moveToWrapper(10.55,-9,4.5,0,0,-0.707,0.707);
            //status : should improve
        }
    }

    @Override
    protected void runPlan3(){
        // write here your plan 3
    }

    // You can add your method
    private void moveToWrapper(double pos_x, double pos_y, double pos_z,
                               double qua_x, double qua_y, double qua_z,
                               double qua_w){

        final int LOOP_MAX = 5;
        final Point point = new Point(pos_x, pos_y, pos_z);
        final Quaternion quaternion = new Quaternion((float)qua_x, (float)qua_y,
                (float)qua_z, (float)qua_w);

        Result result = api.moveTo(point, quaternion, true);

        int loopCounter = 0;
        while(!result.hasSucceeded() || loopCounter < LOOP_MAX){
            result = api.moveTo(point, quaternion, true);
            ++loopCounter;
        }
    }

}
